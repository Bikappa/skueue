// Code generated by github.com/beyondan/gqlgenc, DO NOT EDIT.

package client

import (
	"context"

	"github.com/beyondan/gqlgenc/client"
	"github.com/beyondan/gqlgenc/client/transport"
)

type Client struct {
	Client *client.Client
}

// INPUT_OBJECT: File
type File struct {
	Name string "json:\"name\""
	Data string "json:\"data\""
}

// INPUT_OBJECT: LibraryDescription
type LibraryDescription struct {
	Name    string "json:\"name\""
	Version string "json:\"version\""
}

// INPUT_OBJECT: Sketch
type Sketch struct {
	Name     string          "json:\"name\""
	Files    []File          "json:\"files\""
	Ino      File            "json:\"ino\""
	Metadata *SketchMetadata "json:\"metadata\""
}

// INPUT_OBJECT: SketchMetadata
type SketchMetadata struct {
	IncludedLibs []LibraryDescription "json:\"includedLibs\""
}

// OPERATION: compilationLogSubscription
type CompilationLogSubscription struct {
	CompilationLog *CompilationLogSubscription_CompilationLog "json:\"compilationLog\""
}

// OPERATION: compilationLogSubscription.compilationLog
type CompilationLogSubscription_CompilationLog struct {
	Typename      *string "json:\"__typename\""
	CompilationID string  "json:\"compilationId\""
	Text          string  "json:\"text\""
}

// OPERATION: compilationUpdateSubscription
type CompilationUpdateSubscription struct {
	CompilationUpdate *CompilationUpdateSubscription_CompilationUpdate "json:\"compilationUpdate\""
}

// OPERATION: compilationUpdateSubscription.compilationUpdate
type CompilationUpdateSubscription_CompilationUpdate struct {
	Typename      *string "json:\"__typename\""
	CompilationID string  "json:\"compilationId\""
	State         string  "json:\"state\""
}

// OPERATION: getCompilation
type GetCompilation struct {
	Compilation *GetCompilation_Compilation "json:\"compilation\""
}

// OPERATION: getCompilation.compilation
type GetCompilation_Compilation struct {
	ID *string "json:\"id\""
}

// OPERATION: startCompilation
type StartCompilation struct {
	StartCompilation *StartCompilation_StartCompilation "json:\"startCompilation\""
}

// OPERATION: startCompilation.startCompilation
type StartCompilation_StartCompilation struct {
	ID *string "json:\"id\""
}

// Pointer helpers
func SketchMetadataPtr(v SketchMetadata) *SketchMetadata {
	return &v
}
func BoolPtr(v bool) *bool {
	return &v
}

const StartCompilationDocument = `mutation startCompilation ($fqbn: String!, $sketch: Sketch!, $ota: Boolean = false, $verbose: Boolean = false) {
	startCompilation(fqbn: $fqbn, sketch: $sketch, ota: $ota, verbose: $verbose) {
		id
	}
}
`

func (Ξc *Client) StartCompilation(ctх context.Context, fqbn string, sketch Sketch, ota *bool, verbose *bool) (*StartCompilation, transport.OperationResponse, error) {
	Ξvars := map[string]interface{}{
		"fqbn":    fqbn,
		"sketch":  sketch,
		"ota":     ota,
		"verbose": verbose,
	}

	{
		var data StartCompilation
		res, err := Ξc.Client.Mutation(ctх, "startCompilation", StartCompilationDocument, Ξvars, &data)
		if err != nil {
			return nil, transport.OperationResponse{}, err
		}

		return &data, res, nil
	}
}

const GetCompilationDocument = `query getCompilation ($compilationId: String!) {
	compilation(compilationId: $compilationId) {
		id
	}
}
`

func (Ξc *Client) GetCompilation(ctх context.Context, compilationID string) (*GetCompilation, transport.OperationResponse, error) {
	Ξvars := map[string]interface{}{
		"compilationId": compilationID,
	}

	{
		var data GetCompilation
		res, err := Ξc.Client.Query(ctх, "getCompilation", GetCompilationDocument, Ξvars, &data)
		if err != nil {
			return nil, transport.OperationResponse{}, err
		}

		return &data, res, nil
	}
}

const CompilationUpdateSubscriptionDocument = `subscription compilationUpdateSubscription ($compilationId: String!) {
	compilationUpdate(compilationId: $compilationId) {
		__typename
		compilationId
		state
	}
}
`

type MessageCompilationUpdateSubscription struct {
	Data       *CompilationUpdateSubscription
	Error      error
	Extensions transport.RawExtensions
}

func (Ξc *Client) CompilationUpdateSubscription(ctх context.Context, compilationID string) (<-chan MessageCompilationUpdateSubscription, func()) {
	Ξvars := map[string]interface{}{
		"compilationId": compilationID,
	}

	{
		res := Ξc.Client.Subscription(ctх, "compilationUpdateSubscription", CompilationUpdateSubscriptionDocument, Ξvars)

		ch := make(chan MessageCompilationUpdateSubscription)

		go func() {
			for res.Next() {
				opres := res.Get()

				var msg MessageCompilationUpdateSubscription
				if len(opres.Errors) > 0 {
					msg.Error = opres.Errors
				}

				err := opres.UnmarshalData(&msg.Data)
				if err != nil && msg.Error == nil {
					msg.Error = err
				}

				msg.Extensions = opres.Extensions

				ch <- msg
			}

			if err := res.Err(); err != nil {
				ch <- MessageCompilationUpdateSubscription{
					Error: err,
				}
			}
			close(ch)
		}()

		return ch, res.Close
	}
}

const CompilationLogSubscriptionDocument = `subscription compilationLogSubscription ($compilationId: String!) {
	compilationLog(compilationId: $compilationId) {
		__typename
		compilationId
		text
	}
}
`

type MessageCompilationLogSubscription struct {
	Data       *CompilationLogSubscription
	Error      error
	Extensions transport.RawExtensions
}

func (Ξc *Client) CompilationLogSubscription(ctх context.Context, compilationID string) (<-chan MessageCompilationLogSubscription, func()) {
	Ξvars := map[string]interface{}{
		"compilationId": compilationID,
	}

	{
		res := Ξc.Client.Subscription(ctх, "compilationLogSubscription", CompilationLogSubscriptionDocument, Ξvars)

		ch := make(chan MessageCompilationLogSubscription)

		go func() {
			for res.Next() {
				opres := res.Get()

				var msg MessageCompilationLogSubscription
				if len(opres.Errors) > 0 {
					msg.Error = opres.Errors
				}

				err := opres.UnmarshalData(&msg.Data)
				if err != nil && msg.Error == nil {
					msg.Error = err
				}

				msg.Extensions = opres.Extensions

				ch <- msg
			}

			if err := res.Err(); err != nil {
				ch <- MessageCompilationLogSubscription{
					Error: err,
				}
			}
			close(ch)
		}()

		return ch, res.Close
	}
}
